---
layout: post
title: "Кросс-платформенная разработка для Windows Phone и Windows 8"
date: 2014-02-01 00:50:11 +0400
comments: true
categories: 
---

## Зачем переносить код, если и так все работает?

Создавая любое приложение, разработчик, конечно же, хочет получить максимальную прибыль, и один из способов достижения этой цели -  покрыть как можно большую аудиторию: для этого приложения локализуются, устраиваются рекламные кампании, и, конечно, переносятся на разные платформы. Существуют различные фреймворки для создания кроссплатформенных приложений, например, PhoneGap, приложения для которого разрабатываются на HTML5, или Xamarin – среда разработки приложений для iOS, Android, Windows Phone и Win8 на C#. 

В рамках этой статьи мы рассмотрим, какие возможности для создания приложений с общим исходным кодом нам предлагает Microsoft.

<!--more-->

## Проблема: как минимизировать усилия при написании приложения на все платформы?

Исторически сложилось так, что Windows Phone 7 появился рынке раньше, чем Windows 8, и в его основу лег тот же Windows CE, что был в Windows Mobile. Не обладаю инфромацией почему, но Microsoft закрыли возможность сторонним разработчикам писать Native приложения, но зато появилась возможность писать приложения на Silverlight, адаптированном для мобильных устройств, и разрабатывать игры на XNA. Windows Phone 7.5, помимо различных полезнейших вещей вроде фоновых агентов, принесла возможность разрабатывать приложения, совмещая технологии Silverlight и XNA. 

Далее практически вместе с Windows 8 вышла новая версия мобильной операционной системы - Windows Phone 8. Основное отличие новой операционной системы – отказ от старого ядра Windows CE и переезд на то же ядро, что и в настольной операционной системе: Windows NT. Эти изменения конечно же затронули разработчиков, и теперь у нас появилась возможность разрабатывать приложения для Windows Phone еще и на C/C++.

Таким образом, перед разработчиками встал вопрос: как с минимальными усилиями поддерживать разработку приложения под Windows Phone и Windows 8?

## 1. Использование PCL (Portable Class Library)
Концепция PCL заключается в том, что по-большому счету, у обеих платформ (Windows Phone и Windows 8) пересекаются много пространств имен и они имеют много общих типов. Если ваш код, и библиотеки, которые в нем используются, используют только это подмножество .NET Framework, вы можете создать PCL, а потом прилинковать её к Windows Phone и Windows 8 проектам.

Когда вы выносите общий код в PCL, то можете заметить некоторые ограничения, в зависимости от платформ, которые вы выберите. Например, если вы хотите использовать механизм Tasks, который включает в себя поддержку ключевых слов async/await, то вашу библиотеку невозможно будет подключить к проекту для Windows Phone 7 приложений, т.к. в нем поддержка тасков отсутствует. Решается это с помощью установки Microsoft.Bcl.Async из NuGet.

Следующие 3 способа заключаются в том, что одни и те же файлы добавляются в проект для Windows Phone и Windows 8, разделяя функционал, недоступный на обеих платформах. Эти способы не являются взаимоисключающими, таким образом, их можно использовать совместно в одном проекте для тех или иных сценариев.

## 2. Использование директив компилятора

Первое – использование директив компилятора для скрытия участков кода, в зависимости от платформы, под которую компилируется приложение. По-умолчанию Windows Phone приложения определяются как WINDOWS_PHONE, и Windows 8 приложения, соответственно, как NETFX_CORE. Например, этот код подключает разные пространства имен в зависимости от платформы, под которую собираются приложения: 

```csharp
#if NETFX_CORE
using Windows.UI.Xaml.Media.Imaging;
#else
using System.Windows.Media.Imaging;
#endif
```

Данный способ является наиболее простым в реализации, но код быстро становится неподдерживаемым, особенно если такой подход используется для больших кусков кода. Очень сложно определить, какой код является платформо-специфичным, а какой - общим.

## 3. Использование наследования

Одна из возможностей проще отделять платформо-зависимый код от платформо-независимого – использование наследования. Таким образом, общий код будет помещаться в базовый класс, а платформо-зависимый код – в классы-наследники. 

В классы наследники будет попадать код по двум причинам: первое, если какая-то функциональность доступна только на одной платформе (например, отправка SMS). Второе – если какая-то функциональность должна быть по-разному устроена для разных платформ (например – API для работы с файлами). Такой код помещается также в подкласс, как в этом примере:

```csharp
    public abstract class MainPageViewModel : NotifyBase, IViewModel
    {
        protected abstract void DisplayPicture();
    }


    public class WinMainPageViewModel : MainPageViewModel,
      ISupportsDesignTimeDataViaCode
    {
        protected override void DisplayPicture()
        {
            // Имплементация отображения изображения
        }
    }
```

## 4. Partial классы и методы

Как альтернатива использованию наследования – использование Partial классов и методов. Partial классы изначально использовались для того, чтобы разработчики могли расширять функционал автоматически сгенерированных классов. Перегружая методы в отдельном partial классе, разработчик мог не бояться, что его работа исчезнет во время следующей генерации кода базового класса.

Такой же подход может быть использован для разделения общего кода, от платформозависимого. В данном примере, метод, находящийся в общем коде, вызывает метод находящийся в другом partial классе, который реализуется с учетом специфики платформы.

``` csharp
    public partial class DataSource : IDataSource
    {
        public async Task<IEnumerable<IFolder>> RetrieveFolders(IFolder root)
        {
            // Other logic
            var folders = await LoadFolders(root);
            // Other logic
            return folders;
        }
    }

    public partial class DataSource
    {
        private async Task<IEnumerable<IFolder>> LoadFolders(IFolder root)
        {
            //logic
        }
    }
```

Примерно этот же подход можно использовать и для методов, но он накладывает некоторые ограничения (например, методы могут возвращать только void).
Когда вы пытаетесь решить, каким из этих способов переиспользования кода воспользоваться, очень полезно смотреть на API, предоставленное платформами. Некоторые из них, такие как акселерометр, очень похожи, другие, например, работа с файлами, могут здорово различаться не только в рамках отличий Windows Phone от Windows 8, но и в рамках отличий Windows Phone 7.5 от Windows Phone 8. 

Существует отличный инструмент для этого: XAML Dialect Comparer Tool, почитать о котором и скачать можно по ссылке:
http://xamldialects.codeplex.com/ 
 

## 5. Создание общих компонентов Windows Runtime.

Компоненты Windows Runtime – компоненты, которые можно использовать для расширения функциональности поддерживаемых платформой языков. Используя Windows Runtime, поддерживаемый в Windows Phone 8 и Windows 8, вы можете создавать компоненты на одном языке программирования, а вызывать их в той среде, в которой выполняется ваше приложение. Такие компоненты создаются с помощью шаблона Windows Runtime Component в Visual Studio. На выходе вы получаете файл  .winmd, который содержит также всю мета-информацию, необходимую чтобы этот компонент можно было внедрить в приложение, написанное на C#, C++, VB, JS.
Когда использовать Windows Runtime компоненты:

* Когда вам нужна производительность C++ : если ваше приложение совершает серьезные вычислительные операции, вам будет предпочтительнее писать код на C++ чтобы достичь максимальной производительности. Если ваше основное приложение, которое совершает эти рассчеты, написано на C# или VB, подключение такого компонента сделает ваше приложение значительно быстрее.
* Возможность избежать ограничения языка: в целом, использование Windows Runtime компонентов – отличный способ расшарить общий код на все поддерживаемые платформы (например, которые не поддерживаются в PCL). 
* Использование Direct3D, Win32, COM API: Windows Phone 8 предоставляет native API для разработки «тяжелых» игр, прямого доступа к сети, или, например, к камере. Для использования этих API или managed кода вам необходимо написать обертку в виде Windows Runtime компонента, который будет реализовать нужный функционал.
* Использование сторонних библиотек: еще недавно было весьма затруднительно использовать сторонние библиотеки, написанные на одном языке, при разработке приложения на другом. С использованием Windows Runtime вы можете взять стороннюю библиотеку, обернуть её в Windows Runtime компонент и вызывать её из Managed кода!

## 6. Переиспользование XAML

Несмотря на похожий пользовательский интерфейс, одинаковый внешний вид и поведение многих контролов, бинарно XAML между Windows Phone и Windows 8 не совместим.

Пространства имен, префиксы и набор контролов также довольно здорово различаются, что не позволяет нам полностью переиспользовать XAML между приложениями под разные платформы.

И тем не менее, у разработчиков есть возможность создать UserControl, который можно будет использовать на обеих платформах.

## Что делать если есть приложение под одну платформу, и нужно написать под вторую?

В этом случае я могу вам только пособолезновать ☺. А если серьезно, всё зависит от масштаба вашего приложения и заложенной в него архитектуры. Если приложение небольшое и при разработке использовался паттерн MVVM, то вынос общего кода не составит много проблем. Если же ваш проект уже здорово разросся: использует разные платформенные особенности и зависит от библиотек, которые есть только под одну из платформ, то перенос кода, если и возможен, будет осуществить значительно тяжелее.

Далее мы рассмотрим процесс создания приложения “с  нуля”, сразу заточенное под перенос кода между платформами, и реализующее различные особенности платформ.

